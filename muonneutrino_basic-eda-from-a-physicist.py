import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
def get_event_data(path='../input/train_1/event000001000'):
    cells = pd.read_csv(path+'-cells.csv')
    hits = pd.read_csv(path+'-hits.csv',index_col=0)
    particles = pd.read_csv(path+'-particles.csv',index_col=0)
    truth = pd.read_csv(path+'-truth.csv',index_col=0)
    return cells, hits, particles, truth
cells, hits, particles, truth = get_event_data()
truth.head()
particles.head()
hits.head()
cells.head()
fig = plt.figure(figsize=(10,10))
plt.scatter(hits.x,hits.y,marker='.',alpha=0.1,c=hits.volume_id)
plt.xlabel('x')
plt.ylabel('y')
plt.show()
fig = plt.figure(figsize=(10,10))
plt.scatter(hits.x,hits.z,marker='.',alpha=0.1,c=hits.volume_id)
plt.xlabel('x')
plt.ylabel('z')
plt.show()
fig = plt.figure(figsize=(10,10))
plt.scatter(hits[np.abs(hits.z)<1000].x,hits[np.abs(hits.z)<1000].y,marker='.',alpha=0.1)
plt.xlabel('x')
plt.ylabel('y')
plt.show()
fig = plt.figure(figsize=(10,10))
hits_inner = hits[(np.hypot(hits.x,hits.y)<200) & (np.abs(hits.z)<1500)]
plt.scatter(hits_inner.x,hits_inner.y,marker='.',alpha=0.1,c=hits_inner.volume_id)
plt.xlabel('x')
plt.ylabel('y')
plt.show()
fig = plt.figure(figsize=(10,10))
plt.scatter(hits_inner.x,hits_inner.z,marker='.',alpha=0.1,c=hits_inner.volume_id)
plt.xlabel('x')
plt.ylabel('z')
plt.show()
fig = plt.figure(figsize=(10,10))
hits_inner2 = hits[(np.hypot(hits.x,hits.y)<200) & (np.abs(hits.z)<500)]
plt.scatter(hits_inner2.x,hits_inner2.y,marker='.',alpha=1,c=hits_inner2.layer_id)
plt.xlabel('x')
plt.ylabel('y')
plt.colorbar()
plt.show()
hits_layer3 = hits[(np.abs(hits.z)<500)&(np.hypot(hits.x,hits.y)<190)&(np.hypot(hits.x,hits.y)>150)]
hits_layer3.describe()
hits_with_energy = cells.merge(hits_layer3,how='inner',left_on='hit_id',right_index=True)
fig = plt.figure(figsize=(12,6))
ax = fig.add_subplot(121)
ax.hist(hits_with_energy.value,bins=100)
ax.set_xlabel('Cell Signal Size')
ax = fig.add_subplot(122)
ax.hist(hits_with_energy.groupby('hit_id').value.sum(),bins=100,range=(0,1.2))
ax.set_xlabel('Summed Hit Signal')
plt.show()
hits_with_energy = cells.merge(hits[(hits.volume_id==8)&(hits.layer_id==6)],how='inner',left_on='hit_id',right_index=True)
fig = plt.figure(figsize=(12,6))
ax = fig.add_subplot(121)
ax.hist(hits_with_energy.value,bins=100,range=(0,0.25))
ax.set_xlabel('Cell Signal Size')

ax = fig.add_subplot(122)
ax.hist(hits_with_energy.groupby('hit_id').value.sum(),bins=100,range=(0,1.4))
ax.set_xlabel('Summed Hit Signal')

plt.show()
hits_with_energy = cells.merge(hits[(hits.volume_id==8)&(hits.layer_id==4)],how='inner',left_on='hit_id',right_index=True)
fig = plt.figure(figsize=(12,6))
ax = fig.add_subplot(121)
ax.hist(hits_with_energy.value,bins=100,range=(0,0.25))
ax = fig.add_subplot(122)
ax.hist(hits_with_energy.groupby('hit_id').value.sum(),bins=100,range=(0,2))
plt.show()
def add_kinematics(df):
    df['pt'] = np.hypot(df.px,df.py)
    df['E'] = np.hypot(df.pt,df.pz)
    df['eta'] = -0.5 * np.log( (df.E + df.pz)/(df.E-df.pz))
    df['phi'] = np.arctan2(df.vy,df.vx)
add_kinematics(particles)
plt.hist(particles.nhits,bins=20,range=(0,20))
plt.xlabel('Number of hits')
plt.show()
particles.q.value_counts()
plt.hist(particles.pt,bins=100,range=(0,10))
plt.xlabel('Transverse Momentum [GeV]')
plt.show()
particles_pt_sort = particles.sort_values(by='pt')
px_summed = particles_pt_sort.py.cumsum()
py_summed =particles_pt_sort.px.cumsum()
pt_summed = np.hypot(px_summed,py_summed)
print(pt_summed.values[-20:])
particles_pt_sort = particles.sort_values(by='pt',ascending=False)
px_summed = particles_pt_sort.py.cumsum()
py_summed =particles_pt_sort.px.cumsum()
pt_summed = np.hypot(px_summed,py_summed)
print(pt_summed.values[:20])
particles_pt_sort.head(20)
particles_high_pt = particles[particles.pt>1]
plt.scatter(particles_high_pt.vx,particles_high_pt.vy,alpha=0.3)
plt.show()
plt.scatter(particles_high_pt.vx,particles_high_pt.vy,alpha=0.3)
plt.xlim([-50,50])
plt.ylim([-50,50])
plt.show()
plt.scatter(particles_high_pt.vz,particles_high_pt.vx,alpha=0.3)
plt.ylim([-5,5])
plt.xlim([-25,25])
plt.show()
invariant_mass = []
for ids,gp in particles[particles.pt>1].groupby(['vx','vy','vz']):
    if gp.vx.count()==1:
        continue
    px_tot = gp.px.sum()
    py_tot = gp.py.sum()
    pz_tot = gp.pz.sum()
    E_tot = gp.E.sum()
    invariant_mass.append( np.sqrt(E_tot*E_tot-px_tot*px_tot-py_tot*py_tot-pz_tot*pz_tot) )
    

plt.hist(invariant_mass,bins=100,range=(1,2000))
plt.xlabel('Invariant Mass [GeV]')
plt.show()
particles_near_center = particles[(np.hypot(particles['vx'],particles['vy'])<0.05)
                                  &(np.abs(particles['vz'])<25)]
plt.scatter(particles_near_center.vz,particles_near_center.vx,alpha=0.3)
plt.ylim([-0.1,0.1])
plt.xlim([-25,25])
plt.show() 

plt.hist(particles_near_center.drop_duplicates(subset=['vx','vy','vz']).vz,bins=25)
plt.title('Particle Position Near Beam')
plt.xlabel('Z [mm]')
plt.show()
fig = plt.figure(figsize=(8,6))
plt.hist2d(particles_near_center['eta'],particles_near_center['phi'],bins=(50,50))
plt.xlabel(r'$\eta$')
plt.ylabel(r'$\phi$')
plt.colorbar()
plt.show()
fig = plt.figure(figsize=(8,6))

plt.hist2d(particles_near_center['eta'],particles_near_center['phi'],bins=(50,50),range=([-4,4],[1,3]))
plt.xlabel(r'$\eta$')
plt.ylabel(r'$\phi$')
plt.colorbar()
plt.show()
fig = plt.figure(figsize=(8,6))

particles_tmp = particles_near_center[particles_near_center.E>1]
plt.hist2d(particles_tmp['eta'],particles_tmp['phi'],bins=(50,50),range=([-4,4],[1,3]))
plt.xlabel(r'$\eta$')
plt.ylabel(r'$\phi$')
plt.colorbar()

plt.show()
def get_particle_data(path='../input/train_1/event0000010{:02}-particles.csv'):
    df = pd.DataFrame()
    for i in range(100):
        data = pd.read_csv(path.format(i),index_col=0)
        df = pd.concat([df,data])
    return df
particle_all  = get_particle_data()
add_kinematics(particle_all)    
def near_center(df):
    return df[(np.hypot(df['vx'],df['vy'])<0.05)
               &(np.abs(df['vz'])<25)]
center = near_center(particle_all)
fig = plt.figure(figsize=(8,6))

plt.hist2d(center['eta'],center['phi'],bins=(50,50))
plt.xlabel(r'$\eta$')
plt.ylabel(r'$\phi$')
plt.colorbar()

plt.show()
fig = plt.figure(figsize=(8,6))

plt.hist2d(center[center.E>1]['eta'],center[center.E>1]['phi'],bins=(50,50))
plt.xlabel(r'$\eta$')
plt.ylabel(r'$\phi$')
plt.colorbar()

plt.show()
fig = plt.figure(figsize=(8,6))

plt.hist2d(center[center.E>5]['eta'],center[center.E>5]['phi'],bins=(50,50))
plt.xlabel(r'$\eta$')
plt.ylabel(r'$\phi$')
plt.colorbar()

plt.show()